# -*- coding: utf8 -*-
'''
@project   Maprox <http://www.maprox.net>
@info      Teltonika GH3000 firmware
@copyright 2009-2014, Maprox LLC
'''

from lib.handlers.teltonika.abstract import TeltonikaHandler

class Handler(TeltonikaHandler):
    """ Teltonika. GH3000 """
    pass


# ===========================================================================
# TESTS
# ===========================================================================

import unittest
import kernel.pipe as pipe

class TestCase(unittest.TestCase):

    def setUp(self):
        self.handler = Handler(pipe.TestManager(), None)
        pass

    def test_processData(self):
        self.skipTest('Need mock for redis server')
        h = self.handler
        data = (
            b'\x00\x0f352848022288472'
            b"\x00\x00\x00\x00\x00\x00\x03\x97\x07,\x8d\xf5H#\x00\x8d\xf5H("
            b"\x03 \x18\xa4\x07/\x01\x01-\x8d\xf5H-\x03 \x18\xa4\x07/\x01\x01"
            b"+\x8d\xf5H2\x03 \x18\xa4\x07/\x01\x01+\x8d\xf5H7\x03 \x18\xa4"
            b"\x07/\x01\x01+\x8d\xf5H<\x03 \x18\xa4\x07/\x01\x01+\x8d\xf5HA"
            b"\x03 \x18\xa4\x07/\x01\x01+\x8d\xf5HF\x03 \x18\xa4\x07/\x01\x01"
            b"+\x8d\xf5HK\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5HP\x03 \x18\xa4"
            b"\x07/\x01\x01'\x8d\xf5HU\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5HZ"
            b"\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5H_\x03 \x18\xa4\x07/\x01\x01"
            b"'\x8d\xf5Hd\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5Hi\x03 \x18\xa4"
            b"\x07/\x01\x01'\x8d\xf5Hn\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5Hs"
            b"\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5Hx\x03 \x18\xa4\x07/\x01\x01"
            b"'\x8d\xf5H}\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5H\x82\x03 \x18"
            b"\xa4\x07/\x01\x01'\x8d\xf5H\x87\x03 \x18\xa4\x07/\x01\x01'\x8d"
            b"\xf5H\x8c\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5H\x91\x03 \x18\xa4"
            b"\x07/\x01\x01'\x8d\xf5H\x96\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5"
            b"H\x9b\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5H\xa0\x03 \x18\xa4\x07"
            b"/\x01\x01'\x8d\xf5H\xa5\x03 \x18\xa4\x07/\x01\x01'\x8d\xf5H\xaa"
            b"\x03 \x18\xa4\x07/\x01\x01'\x8d\xf9\x89\xc0\x0f;BT\xf5\x9fBH\xc3"
            b"\x00\x00w\x00\x04\x18\xa4\x07/\x01\x01'\x01\x14\x00K\x01\xdc\x00"
            b"\x00\x00\x8d\x8d\xf9\x89\xc5\x0f;BT\xf5\x9bBH\xc2\xfb\x00{\x00"
            b"\x04\x18\xa4\x07/\x01\x01'\x01\x14\x00K\x01\xdc\x00\x00\x00\x8d"
            b"\x8d\xf9\x89\xca\x0f;BT\xf5\x99BH\xc2\xfc\x00{\x01\x04\x18\xa4"
            b"\x07/\x01\x01'\x01\x14\x00K\x01\xdc\x00\x00\x00\x8d\x8d\xf9\x89"
            b"\xcf\x0f;BT\xf5\xabBH\xc3\x0c\x00|\x00\x04\x18\xa4\x07/\x01\x01"
            b"'\x01\x14\x00K\x01\xdc\x00\x00\x00\x8d\x8d\xf9\x89\xd4\x0f;BT"
            b"\xf5\xaeBH\xc3\x11\x00}\x02\x04\x18\xa4\x07/\x01\x01'\x01\x14"
            b"\x00K\x01\xdc\x00\x00\x00\x8d\x8d\xf9\x89\xd9\x0f;BT\xf5\xacBH"
            b"\xc3\x0e\x00|\x01\x04\x18\xa4\x07/\x01\x01'\x01\x14\x00K\x01"
            b"\xdc\x00\x00\x00\x8d\x8d\xf9\x89\xde\x0f;BT\xf5\xbaBH\xc3\x1c"
            b"\x00}\x01\x04\x18\xa4\x07/\x01\x01'\x01\x14\x00K\x01\xdc\x00"
            b"\x00\x00\x8d\x8d\xf9\x89\xe3\x0f;BT\xf5\xbaBH\xc3!\x00}\x00\x04"
            b"\x18\xa4\x07/\x01\x01'\x01\x14\x00K\x01\xdc\x00\x00\x00\x8d\x8d"
            b"\xf9\x89\xe8\x0f;BT\xf5\xaeBH\xc3\x18\x00}\x00\x04\x18\xa4\x07/"
            b"\x01\x01'\x01\x14\x00L\x01\xdc\x00\x00\x00\x8d\x8d\xf9\x89\xed"
            b"\x0f;BT\xf5\xa0BH\xc3\x0c\x00~\x00\x04\x18\xa4\x07/\x01\x01'"
            b"\x01\x14\x00L\x01\xdc\x00\x00\x00\x8d\x8d\xf9\x89\xf2\x0f;BT"
            b"\xf5\xa0BH\xc3\x07\x00~\x02\x04\x18\xa4\x07/\x01\x01'\x01\x14"
            b"\x00L\x01\xdc\x00\x00\x00\x8d\x8d\xf9\x89\xf7\x0f;BT\xf5\x8bBH"
            b"\xc2\xf7\x00~\x03\x04\x18\xa4\x07/\x01\x01'\x01\x14\x00L\x01"
            b"\xdc\x00\x00\x00\x8d\x8d\xf9\x89\xfc\x0f;BT\xf5\x81BH\xc2\xed"
            b"\x00~\x02\x04\x18\xa4\x07/\x01\x01'\x01\x14\x00L\x01\xdc\x00\x00"
            b"\x00\x8d\x8d\xf9\x8a\x01\x0f;BT\xf5\x85BH\xc2\xf1\x00\x7f\x01"
            b"\x04\x18\xa4\x07/\x01\x01'\x01\x14\x00L\x01\xdc\x00\x00\x00\x8d"
            b"\x8d\xf9\x8a\x06\x0f;BT\xf5\x8fBH\xc2\xfc\x00\x7f\x01\x04\x18"
            b"\xa4\x07/\x01\x01'\x01\x14\x00L\x01\xdc\x00\x00\x00\x8d\x8d\xf9"
            b"\x8a\x0b\x0f;BT\xf5\x90BH\xc2\xff\x00\x80\x00\x04\x18\xa4\x07/"
            b"\x01\x01'\x01\x14\x00L\x01\xdc\x00\x00\x00\x8d,\x00\x00SL"
        )
        h.processData(data)
        stored_packets = h.getStore().get_stored_packets()

        self.assertEqual(len(stored_packets), 44)
        packet = stored_packets[43]

        self.assertEqual(packet['uid'], '352848022288472')
        self.assertEqual(packet['altitude'], 128)
        self.assertEqual(packet['time'], '2014-06-06T15:06:51.000000')

        self.assertEqual(packet['sensors']['sat_count'], 4)
        self.assertEqual(packet['sensors']['altitude'], 128)
        self.assertEqual(packet['sensors']['hdop'], 7.6)